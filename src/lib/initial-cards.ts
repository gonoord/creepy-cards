
import type { CreepyCard } from '@/types';
import { generateCreepyImage } from '@/ai/flows/generate-creepy-image';

const phrases = [
  "Static",
  "Doll",
  "Mirror",
  "Whisper",
  "Footsteps",
  "Clock",
  "Shadow",
  "Key",
  "Silence",
  "Portrait",
  "Cold spot",
  "Music box",
  "Scratching",
  "Empty swing",
  "Reflection", // Shorter
  "Unknown call", // Shorter
  "Scarecrow",
  "Basement",
  "Attic",
  "Locked door"
];

const imageHints = [
  "eerie forest", "ghostly figure", "haunted mansion", "creepy doll", "dark silhouette",
  "monster shadow", "abstract horror", "spooky landscape", "ominous object", "spectral face",
  "abandoned room", "creepy corridor", "glowing eyes", "mysterious door", "twisted tree",
  "old photograph", "dusty artifact", "antique toy", "dark cellar", "hidden passage"
];

const TOTAL_INITIAL_CARDS = 80;
const UPFRONT_GENERATION_COUNT = 1; // Generates 1 image upfront

export async function generateInitialCards(): Promise<CreepyCard[]> {
  const cards: CreepyCard[] = [];
  const goosebumpsStyleSuffix = ", in the vibrant, colorful, and spooky art style reminiscent of classic Goosebumps book covers.";
  
  for (let i = 0; i < TOTAL_INITIAL_CARDS; i++) {
    const phrase = phrases[i % phrases.length];
    const cardId = `initial-${i + 1}`;
    const placeholderImageUrl = `https://placehold.co/600x400.png`;
    // Use a more specific hint if the phrase is very short, otherwise a general one
    const placeholderAiHint = phrase.split(" ").length <= 2 ? phrase.toLowerCase() : imageHints[i % imageHints.length];


    if (i < UPFRONT_GENERATION_COUNT) {
      try {
        const imageResult = await generateCreepyImage({ prompt: phrase + goosebumpsStyleSuffix });
        cards.push({
          id: cardId,
          phrase: phrase,
          imageUrl: imageResult.imageDataUri,
          isAIGenerated: true,
          imageGenerated: true, // Successfully generated
        });
      } catch (error) {
        console.error(`Failed to generate initial image for card "${phrase}":`, error);
        cards.push({
          id: cardId,
          phrase: phrase,
          imageUrl: placeholderImageUrl,
          isAIGenerated: false,
          imageGenerated: true, // Attempted, failed, use placeholder, don't retry this one in batch
          aiHint: placeholderAiHint
        });
      }
    } else {
      // For cards beyond the initial upfront batch, set placeholder and mark for later generation
      cards.push({
        id: cardId,
        phrase: phrase,
        imageUrl: placeholderImageUrl,
        isAIGenerated: false, 
        imageGenerated: false, // Needs to be generated by batch process
        aiHint: placeholderAiHint
      });
    }
  }
  return cards;
}

